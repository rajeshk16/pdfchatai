"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/ai-stream-experimental";
exports.ids = ["vendor-chunks/ai-stream-experimental"];
exports.modules = {

/***/ "(ssr)/./node_modules/ai-stream-experimental/react/dist/index.mjs":
/*!******************************************************************!*\
  !*** ./node_modules/ai-stream-experimental/react/dist/index.mjs ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useChat: () => (/* binding */ useChat),\n/* harmony export */   useCompletion: () => (/* binding */ useCompletion)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var swr__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! swr */ \"(ssr)/./node_modules/swr/core/dist/index.mjs\");\n/* harmony import */ var nanoid_non_secure__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! nanoid/non-secure */ \"(ssr)/./node_modules/nanoid/non-secure/index.js\");\n/* __next_internal_client_entry_do_not_use__ useChat,useCompletion auto */ // react/use-chat.ts\n\n\n// shared/utils.ts\n\nvar nanoid = (0,nanoid_non_secure__WEBPACK_IMPORTED_MODULE_2__.customAlphabet)(\"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\", 7);\nfunction createChunkDecoder(complex) {\n    const decoder = new TextDecoder();\n    if (!complex) {\n        return function(chunk) {\n            if (!chunk) return \"\";\n            return decoder.decode(chunk, {\n                stream: true\n            });\n        };\n    }\n    return function(chunk) {\n        const decoded = decoder.decode(chunk, {\n            stream: true\n        }).split(\"\\n\");\n        return decoded.map(getStreamStringTypeAndValue).filter(Boolean);\n    };\n}\nvar StreamStringPrefixes = {\n    text: 0,\n    function_call: 1,\n    data: 2\n};\nvar getStreamStringTypeAndValue = (line)=>{\n    const firstSeperatorIndex = line.indexOf(\":\");\n    const prefix = line.slice(0, firstSeperatorIndex);\n    const type = Object.keys(StreamStringPrefixes).find((key)=>StreamStringPrefixes[key] === Number(prefix));\n    const val = line.slice(firstSeperatorIndex + 1);\n    let parsedVal = val;\n    if (!val) {\n        return {\n            type,\n            value: \"\"\n        };\n    }\n    try {\n        parsedVal = JSON.parse(val);\n    } catch (e) {\n        console.error(\"Failed to parse JSON value:\", val);\n    }\n    return {\n        type,\n        value: parsedVal\n    };\n};\nvar COMPLEX_HEADER = \"X-Experimental-Stream-Data\";\n// react/use-chat.ts\nvar getStreamedResponse = async (api, chatRequest, mutate, mutateStreamData, existingData, extraMetadataRef, messagesRef, abortControllerRef, onFinish, onResponse, sendExtraMessageFields)=>{\n    var _a, _b;\n    const previousMessages = messagesRef.current;\n    mutate(chatRequest.messages, false);\n    const res = await fetch(api, {\n        method: \"POST\",\n        body: JSON.stringify({\n            messages: sendExtraMessageFields ? chatRequest.messages : chatRequest.messages.map(({ role, content, name, function_call })=>({\n                    role,\n                    content,\n                    ...name !== void 0 && {\n                        name\n                    },\n                    ...function_call !== void 0 && {\n                        function_call\n                    }\n                })),\n            ...extraMetadataRef.current.body,\n            ...(_a = chatRequest.options) == null ? void 0 : _a.body,\n            ...chatRequest.functions !== void 0 && {\n                functions: chatRequest.functions\n            },\n            ...chatRequest.function_call !== void 0 && {\n                function_call: chatRequest.function_call\n            }\n        }),\n        credentials: extraMetadataRef.current.credentials,\n        headers: {\n            ...extraMetadataRef.current.headers,\n            ...(_b = chatRequest.options) == null ? void 0 : _b.headers\n        },\n        ...abortControllerRef.current !== null && {\n            signal: abortControllerRef.current.signal\n        }\n    }).catch((err)=>{\n        mutate(previousMessages, false);\n        throw err;\n    });\n    if (onResponse) {\n        try {\n            await onResponse(res);\n        } catch (err) {\n            throw err;\n        }\n    }\n    if (!res.ok) {\n        mutate(previousMessages, false);\n        throw new Error(await res.text() || \"Failed to fetch the chat response.\");\n    }\n    if (!res.body) {\n        throw new Error(\"The response body is empty.\");\n    }\n    const isComplexMode = res.headers.get(COMPLEX_HEADER) === \"true\";\n    const createdAt = /* @__PURE__ */ new Date();\n    const reader = res.body.getReader();\n    const decode = createChunkDecoder(isComplexMode);\n    let responseMessages = [];\n    let streamedResponse = \"\";\n    const replyId = nanoid();\n    let responseMessage = {\n        id: replyId,\n        createdAt,\n        content: \"\",\n        role: \"assistant\"\n    };\n    let responseData = [];\n    const prefixMap = {};\n    if (isComplexMode) {\n        while(true){\n            const { done, value } = await reader.read();\n            if (done) {\n                break;\n            }\n            const lines = decode(value);\n            if (typeof lines === \"string\") {\n                throw new Error(\"Invalid response format. Complex mode was set but the response is a string. This should never happen.\");\n            }\n            for (const { type, value: value2 } of lines){\n                if (type === \"text\") {\n                    if (prefixMap[\"text\"]) {\n                        prefixMap[\"text\"] = {\n                            ...prefixMap[\"text\"],\n                            content: (prefixMap[\"text\"].content || \"\") + value2\n                        };\n                    } else {\n                        prefixMap[\"text\"] = {\n                            id: nanoid(),\n                            role: \"assistant\",\n                            content: value2,\n                            createdAt\n                        };\n                    }\n                }\n                if (type === \"function_call\") {\n                    prefixMap[\"function_call\"] = value2;\n                }\n                if (type === \"data\") {\n                    const parsedValue = JSON.parse(value2);\n                    if (prefixMap[\"data\"]) {\n                        prefixMap[\"data\"] = [\n                            ...prefixMap[\"data\"],\n                            ...parsedValue\n                        ];\n                    } else {\n                        prefixMap[\"data\"] = parsedValue;\n                    }\n                }\n                const data = prefixMap[\"data\"];\n                const responseMessage2 = prefixMap[\"text\"];\n                let functionCall = prefixMap[\"function_call\"];\n                let functionCallMessage = null;\n                if (functionCall) {\n                    const parsedFunctionCall = JSON.parse(functionCall).function_call;\n                    functionCallMessage = {\n                        id: nanoid(),\n                        role: \"function\",\n                        content: \"\",\n                        name: parsedFunctionCall.name,\n                        createdAt\n                    };\n                }\n                const merged = [\n                    functionCallMessage,\n                    responseMessage2\n                ].filter(Boolean);\n                mutate([\n                    ...chatRequest.messages,\n                    ...merged\n                ], false);\n                mutateStreamData([\n                    ...existingData || [],\n                    ...data || []\n                ]);\n                if (abortControllerRef.current === null) {\n                    reader.cancel();\n                    break;\n                }\n            }\n        }\n        for (const [type, item] of Object.entries(prefixMap)){\n            if (onFinish && type === \"text\") {\n                onFinish(item);\n            }\n            if (type === \"data\") {\n                responseData.push(item);\n            } else {\n                responseMessages.push(item);\n            }\n        }\n        return {\n            messages: responseMessages,\n            data: responseData\n        };\n    } else {\n        while(true){\n            const { done, value } = await reader.read();\n            if (done) {\n                break;\n            }\n            streamedResponse += decode(value);\n            if (streamedResponse.startsWith('{\"function_call\":')) {\n                responseMessage[\"function_call\"] = streamedResponse;\n            } else {\n                responseMessage[\"content\"] = streamedResponse;\n            }\n            mutate([\n                ...chatRequest.messages,\n                {\n                    ...responseMessage\n                }\n            ], false);\n            if (abortControllerRef.current === null) {\n                reader.cancel();\n                break;\n            }\n        }\n        if (streamedResponse.startsWith('{\"function_call\":')) {\n            const parsedFunctionCall = JSON.parse(streamedResponse).function_call;\n            responseMessage[\"function_call\"] = parsedFunctionCall;\n            mutate([\n                ...chatRequest.messages,\n                {\n                    ...responseMessage\n                }\n            ]);\n        }\n        if (onFinish) {\n            onFinish(responseMessage);\n        }\n        return responseMessage;\n    }\n};\nfunction useChat({ api = \"/api/chat\", id, initialMessages = [], initialInput = \"\", sendExtraMessageFields, experimental_onFunctionCall, onResponse, onFinish, onError, credentials, headers, body } = {}) {\n    const hookId = (0,react__WEBPACK_IMPORTED_MODULE_0__.useId)();\n    const chatId = id || hookId;\n    const { data: messages, mutate } = (0,swr__WEBPACK_IMPORTED_MODULE_1__[\"default\"])([\n        api,\n        chatId\n    ], null, {\n        fallbackData: initialMessages\n    });\n    const { data: isLoading = false, mutate: mutateLoading } = (0,swr__WEBPACK_IMPORTED_MODULE_1__[\"default\"])([\n        chatId,\n        \"loading\"\n    ], null);\n    const { data: streamData, mutate: mutateStreamData } = (0,swr__WEBPACK_IMPORTED_MODULE_1__[\"default\"])([\n        chatId,\n        \"streamData\"\n    ], null);\n    const messagesRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(messages || []);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        messagesRef.current = messages || [];\n    }, [\n        messages\n    ]);\n    const abortControllerRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const extraMetadataRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)({\n        credentials,\n        headers,\n        body\n    });\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        extraMetadataRef.current = {\n            credentials,\n            headers,\n            body\n        };\n    }, [\n        credentials,\n        headers,\n        body\n    ]);\n    const [error, setError] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)();\n    async function triggerRequest(chatRequest) {\n        try {\n            mutateLoading(true);\n            const abortController = new AbortController();\n            abortControllerRef.current = abortController;\n            while(true){\n                const messagesAndDataOrJustMessage = await getStreamedResponse(api, chatRequest, mutate, mutateStreamData, streamData, extraMetadataRef, messagesRef, abortControllerRef, onFinish, onResponse, sendExtraMessageFields);\n                if (\"messages\" in messagesAndDataOrJustMessage) {\n                    for (const message of messagesAndDataOrJustMessage.messages){\n                        if (message.function_call === void 0 || typeof message.function_call === \"string\") {\n                            break;\n                        }\n                        if (experimental_onFunctionCall) {\n                            const functionCall = message.function_call;\n                            const functionCallResponse = await experimental_onFunctionCall(messagesRef.current, functionCall);\n                            if (functionCallResponse === void 0) break;\n                            chatRequest = functionCallResponse;\n                        }\n                    }\n                } else {\n                    const streamedResponseMessage = messagesAndDataOrJustMessage;\n                    if (streamedResponseMessage.function_call === void 0 || typeof streamedResponseMessage.function_call === \"string\") {\n                        break;\n                    }\n                    if (experimental_onFunctionCall) {\n                        const functionCall = streamedResponseMessage.function_call;\n                        const functionCallResponse = await experimental_onFunctionCall(messagesRef.current, functionCall);\n                        if (functionCallResponse === void 0) break;\n                        chatRequest = functionCallResponse;\n                    }\n                }\n                abortControllerRef.current = null;\n                return null;\n            }\n        } catch (err) {\n            if (err.name === \"AbortError\") {\n                abortControllerRef.current = null;\n                return null;\n            }\n            if (onError && err instanceof Error) {\n                onError(err);\n            }\n            setError(err);\n        } finally{\n            mutateLoading(false);\n        }\n    }\n    const append = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async (message, { options, functions, function_call } = {})=>{\n        if (!message.id) {\n            message.id = nanoid();\n        }\n        const chatRequest = {\n            messages: messagesRef.current.concat(message),\n            options,\n            ...functions !== void 0 && {\n                functions\n            },\n            ...function_call !== void 0 && {\n                function_call\n            }\n        };\n        return triggerRequest(chatRequest);\n    }, [\n        triggerRequest\n    ]);\n    const reload = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async ({ options, functions, function_call } = {})=>{\n        if (messagesRef.current.length === 0) return null;\n        const lastMessage = messagesRef.current[messagesRef.current.length - 1];\n        if (lastMessage.role === \"assistant\") {\n            const chatRequest2 = {\n                messages: messagesRef.current.slice(0, -1),\n                options,\n                ...functions !== void 0 && {\n                    functions\n                },\n                ...function_call !== void 0 && {\n                    function_call\n                }\n            };\n            return triggerRequest(chatRequest2);\n        }\n        const chatRequest = {\n            messages: messagesRef.current,\n            options,\n            ...functions !== void 0 && {\n                functions\n            },\n            ...function_call !== void 0 && {\n                function_call\n            }\n        };\n        return triggerRequest(chatRequest);\n    }, [\n        triggerRequest\n    ]);\n    const stop = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        if (abortControllerRef.current) {\n            abortControllerRef.current.abort();\n            abortControllerRef.current = null;\n        }\n    }, []);\n    const setMessages = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((messages2)=>{\n        mutate(messages2, false);\n        messagesRef.current = messages2;\n    }, [\n        mutate\n    ]);\n    const [input, setInput] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(initialInput);\n    const handleSubmit = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((e, { options, functions, function_call } = {}, metadata)=>{\n        if (metadata) {\n            extraMetadataRef.current = {\n                ...extraMetadataRef.current,\n                ...metadata\n            };\n        }\n        e.preventDefault();\n        if (!input) return;\n        append({\n            content: input,\n            role: \"user\",\n            createdAt: /* @__PURE__ */ new Date()\n        }, {\n            options,\n            functions,\n            function_call\n        });\n        setInput(\"\");\n    }, [\n        input,\n        append\n    ]);\n    const handleInputChange = (e)=>{\n        setInput(e.target.value);\n    };\n    return {\n        messages: messages || [],\n        error,\n        append,\n        reload,\n        stop,\n        setMessages,\n        input,\n        setInput,\n        handleInputChange,\n        handleSubmit,\n        isLoading,\n        data: streamData\n    };\n}\n// react/use-completion.ts\n\n\nfunction useCompletion({ api = \"/api/completion\", id, initialCompletion = \"\", initialInput = \"\", credentials, headers, body, onResponse, onFinish, onError } = {}) {\n    const hookId = (0,react__WEBPACK_IMPORTED_MODULE_0__.useId)();\n    const completionId = id || hookId;\n    const { data, mutate } = (0,swr__WEBPACK_IMPORTED_MODULE_1__[\"default\"])([\n        api,\n        completionId\n    ], null, {\n        fallbackData: initialCompletion\n    });\n    const { data: isLoading = false, mutate: mutateLoading } = (0,swr__WEBPACK_IMPORTED_MODULE_1__[\"default\"])([\n        completionId,\n        \"loading\"\n    ], null);\n    const [error, setError] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(void 0);\n    const completion = data;\n    const [abortController, setAbortController] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const extraMetadataRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)({\n        credentials,\n        headers,\n        body\n    });\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        extraMetadataRef.current = {\n            credentials,\n            headers,\n            body\n        };\n    }, [\n        credentials,\n        headers,\n        body\n    ]);\n    async function triggerRequest(prompt, options) {\n        try {\n            mutateLoading(true);\n            const abortController2 = new AbortController();\n            setAbortController(abortController2);\n            mutate(\"\", false);\n            const res = await fetch(api, {\n                method: \"POST\",\n                body: JSON.stringify({\n                    prompt,\n                    ...extraMetadataRef.current.body,\n                    ...options == null ? void 0 : options.body\n                }),\n                credentials: extraMetadataRef.current.credentials,\n                headers: {\n                    ...extraMetadataRef.current.headers,\n                    ...options == null ? void 0 : options.headers\n                },\n                signal: abortController2.signal\n            }).catch((err)=>{\n                throw err;\n            });\n            if (onResponse) {\n                try {\n                    await onResponse(res);\n                } catch (err) {\n                    throw err;\n                }\n            }\n            if (!res.ok) {\n                throw new Error(await res.text() || \"Failed to fetch the chat response.\");\n            }\n            if (!res.body) {\n                throw new Error(\"The response body is empty.\");\n            }\n            let result = \"\";\n            const reader = res.body.getReader();\n            const decoder = createChunkDecoder();\n            while(true){\n                const { done, value } = await reader.read();\n                if (done) {\n                    break;\n                }\n                result += decoder(value);\n                mutate(result, false);\n                if (abortController2 === null) {\n                    reader.cancel();\n                    break;\n                }\n            }\n            if (onFinish) {\n                onFinish(prompt, result);\n            }\n            setAbortController(null);\n            return result;\n        } catch (err) {\n            if (err.name === \"AbortError\") {\n                setAbortController(null);\n                return null;\n            }\n            if (err instanceof Error) {\n                if (onError) {\n                    onError(err);\n                }\n            }\n            setError(err);\n        } finally{\n            mutateLoading(false);\n        }\n    }\n    const stop = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        if (abortController) {\n            abortController.abort();\n            setAbortController(null);\n        }\n    }, [\n        abortController\n    ]);\n    const setCompletion = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((completion2)=>{\n        mutate(completion2, false);\n    }, [\n        mutate\n    ]);\n    const complete = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async (prompt, options)=>{\n        return triggerRequest(prompt, options);\n    }, [\n        triggerRequest\n    ]);\n    const [input, setInput] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(initialInput);\n    const handleSubmit = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((e)=>{\n        e.preventDefault();\n        if (!input) return;\n        return complete(input);\n    }, [\n        input,\n        complete\n    ]);\n    const handleInputChange = (e)=>{\n        setInput(e.target.value);\n    };\n    return {\n        completion,\n        complete,\n        error,\n        setCompletion,\n        stop,\n        input,\n        setInput,\n        handleInputChange,\n        handleSubmit,\n        isLoading\n    };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ai-stream-experimental/react/dist/index.mjs\n");

/***/ })

};
;